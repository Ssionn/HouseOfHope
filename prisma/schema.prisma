// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int     @id @default(autoincrement())
  firstname      String
  lastname       String
  email          String  @unique
  password       String
  provider       String?
  provider_token String?

  surveys SurveyUser[]
  Survey  Survey[]

  teamLeaderOf Team[] @relation("TeamLeader")
  team         Team?  @relation("TeamMembers", fields: [teamId], references: [id])
  teamId       Int?

  role   Role? @relation(fields: [roleId], references: [id])
  roleId Int?
}

model Role {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  user       User[]
  permission Permission[]
}

model Permission {
  id     Int    @id @default(autoincrement())
  name   String @unique
  Role   Role?  @relation(fields: [roleId], references: [id])
  roleId Int?
}

model Survey {
  id          Int          @id @default(autoincrement())
  title       String
  description String?
  creator     User         @relation(fields: [creatorId], references: [id])
  creatorId   Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  questions   Question[]
  users       SurveyUser[]
}

model SurveyUser {
  userId     Int
  surveyId   Int
  assignedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  survey Survey @relation(fields: [surveyId], references: [id])

  @@id([userId, surveyId])
}

model Question {
  id        Int      @id @default(autoincrement())
  text      String
  survey    Survey   @relation(fields: [surveyId], references: [id])
  surveyId  Int
  options   Option[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Option {
  id         Int      @id @default(autoincrement())
  text       String
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
}

model Faq {
  id              Int    @id @default(autoincrement())
  faq_question    String
  faq_description String @db.VarChar(2000)
  faq_role        Role
}

model Team {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?

  leaderId Int
  leader   User @relation("TeamLeader", fields: [leaderId], references: [id])

  members User[] @relation("TeamMembers")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
